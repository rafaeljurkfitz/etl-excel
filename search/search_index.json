{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project ETL-Excel","text":"<p>This is a project aiming to study an example dedicated to demonstrating refactoring practices. In this space, you will find an in-depth description of ETL, installation instructions, answers to frequently asked questions, and more. Whether you are a collaborator or simply someone interested in the project, we hope you find this documentation useful.</p> <p>Additionally, this documentation can be integrated into Confluence or an internal intranet, facilitating access and collaboration for all team members.</p>"},{"location":"#sections","title":"Sections","text":"<ul> <li>Project ETL-Excel</li> <li>Sections</li> <li>Introduction</li> <li>Installation Guide</li> <li>FAQ</li> <li>Contact</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>The objective of this project is to demonstrate how refactoring techniques can be applied to improve code quality, optimize performance and make software more maintainable. Refactoring is essential for keeping code clean and understandable, allowing teams to maintain high development velocity over time.</p>"},{"location":"#installation-guide","title":"Installation Guide","text":"<p>Here, you will find detailed instructions on how to install and configure the project in your local environment. Following the instructions correctly ensures that you have a smooth experience when working on the project.</p>"},{"location":"#faq","title":"FAQ","text":"<p>This section provides answers to frequently asked questions. If you have any questions that are not covered here, please feel free to get in touch.</p>"},{"location":"#contact","title":"Contact","text":"<p>For any questions, feedback or support related to the project, you can contact us directly via email: lvgalvaofilho@gmail.com. He will always be willing to help!</p>"},{"location":"api/","title":"API Documentation","text":"<p>Below you will find details about the functions and modules of our project.</p>"},{"location":"api/#modulo-consolidador","title":"M\u00f3dulo <code>consolidador</code>","text":"<p>module for extracting the necessary data to consolidate opening data.</p> <p>module with all the transformations necessary to consolidate the opening data.</p> <p>module with all the transformation necessary to consolidate the opening data.</p> <p>This module contains functions for the ETL process.</p>"},{"location":"api/#app.ETL.extract.extract_from_excel","title":"<code>extract_from_excel(path)</code>","text":"<p>Read the files of a folder <code>data/input</code> and return a list of dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>input_path</code> <code>str</code> <p>Path to folder with the files</p> required <p>Returns:</p> Name Type Description <code>list</code> <code>List[DataFrame]</code> <p>list of dataframes</p> Source code in <code>app\\ETL\\extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"Read the files of a folder ```data/input``` and return a list of dataframes.\n\n    Args:\n        input_path (str): Path to folder with the files\n\n    Returns:\n        list: list of dataframes\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, '*.xlsx'))\n    if not all_files:\n        raise ValueError('No Excel files found in the specified folder')\n\n    data_frame_list = []\n    for file in all_files:\n        data_frame_list.append(pd.read_excel(file))\n\n    return data_frame_list\n</code></pre>"},{"location":"api/#app.ETL.transform.concat_data_frames","title":"<code>concat_data_frames(data_frame_list)</code>","text":"<p>Transform a list of dataframes in only one dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame_list</code> <code>List[DataFrame]</code> <p>list of dataframes</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: one dataframe</p> Source code in <code>app\\ETL\\transform.py</code> <pre><code>def concat_data_frames(data_frame_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"Transform a list of dataframes in only one dataframe.\n\n    Args:\n        data_frame_list (List[pd.DataFrame]): list of dataframes\n\n    Returns:\n        pd.DataFrame: one dataframe\n    \"\"\"\n    if not data_frame_list:\n        raise ValueError('No data to transform')\n    return pd.concat(data_frame_list, ignore_index=True)\n</code></pre>"},{"location":"api/#app.ETL.load.load_excel","title":"<code>load_excel(data_frame, output_path, file_name)</code>","text":"<p>Receive a dataframe and save as excel.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame</code> <code>DataFrame</code> <p>dataframe to be save as excel</p> required <code>output_path</code> <code>str</code> <p>path where the file will be saved</p> required <code>file_name</code> <code>str</code> <p>name of folder to be saved</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> Source code in <code>app\\ETL\\load.py</code> <pre><code>def load_excel(\n    data_frame: pd.DataFrame, output_path: str, file_name: str\n) -&gt; None:\n    \"\"\"Receive a dataframe and save as excel.\n\n    Args:\n        data_frame (pd.DataFrame): dataframe to be save as excel\n        output_path (str): path where the file will be saved\n        file_name (str): name of folder to be saved\n\n    Returns:\n        None:\n    \"\"\"\n    if not isinstance(data_frame, pd.DataFrame):\n        raise TypeError('`data_frame` must be a pandas DataFrame.')\n    if not file_name:\n        raise ValueError('`file_name` cannot be empty.')\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n    try:\n        data_frame.to_excel(os.path.join(output_path, file_name), index=False)\n        print('File saved successfully!')\n    except PermissionError as e:\n        raise PermissionError(\n            errno.EACCES, f'Permission denied: {output_path}'\n        ) from e\n    except Exception as e:\n        raise RuntimeError(\n            f'Failed to save DataFrame as Excel file: {e}'\n        ) from e\n</code></pre>"},{"location":"api/#app.ETL.pipeline.pipeline_completa","title":"<code>pipeline_completa(input_folder, output_folder, output_file_name)</code>","text":"<p>Fun\u00e7\u00e3o ETL: Extract, Transform and load data from Excel files.</p> <p>type: input_folder: strs</p> Source code in <code>app\\ETL\\pipeline.py</code> <pre><code>def pipeline_completa(input_folder, output_folder, output_file_name):\n    \"\"\"\n    Fun\u00e7\u00e3o ETL: Extract, Transform and load data from Excel files.\n\n    type: input_folder: strs\n    \"\"\"\n    data = extract_from_excel(input_folder)\n    consolidated_df = concat_data_frames(data)\n    load_excel(consolidated_df, output_folder, output_file_name)\n</code></pre>"}]}